///aa//	<注释 : 76>	2
/***
bb*/	<注释 : 76>	3
typedef	<typedef : 25>	4
struct	<struct : 22>	4
Book	<标识符 : 1>	4
{	<{ : 34>	4
char	<char : 24>	5
register_num	<标识符 : 1>	5
[	<[ : 38>	5
30	<整数 : 70>	5
]	<] : 39>	5
;	<; : 40>	5
//登记号(为一本书的唯一编号)	<注释 : 76>	6
char	<char : 24>	6
batch	<标识符 : 1>	6
[	<[ : 38>	6
30	<整数 : 70>	6
]	<] : 39>	6
;	<; : 40>	6
//批次号(买书入库的时间批次信息)	<注释 : 76>	7
char	<char : 24>	7
seek_num	<标识符 : 1>	7
[	<[ : 38>	7
30	<整数 : 70>	7
]	<] : 39>	7
;	<; : 40>	7
//索书号(同一种书放置的位置信息)	<注释 : 76>	8
int	<int : 3>	8
frequency	<标识符 : 1>	8
;	<; : 40>	8
//一本书总出借次数	<注释 : 76>	9
char	<char : 24>	9
name	<标识符 : 1>	9
[	<[ : 38>	9
40	<整数 : 70>	9
]	<] : 39>	9
;	<; : 40>	9
//书名	<注释 : 76>	10
char	<char : 24>	10
author	<标识符 : 1>	10
[	<[ : 38>	10
30	<整数 : 70>	10
]	<] : 39>	10
;	<; : 40>	10
//作者	<注释 : 76>	11
char	<char : 24>	11
publisher	<标识符 : 1>	11
[	<[ : 38>	11
30	<整数 : 70>	11
]	<] : 39>	11
;	<; : 40>	11
//出版社	<注释 : 76>	12
char	<char : 24>	12
isbn	<标识符 : 1>	12
[	<[ : 38>	12
30	<整数 : 70>	12
]	<] : 39>	12
;	<; : 40>	12
//ISBN	<注释 : 76>	13
float	<float : 4>	13
price	<标识符 : 1>	13
;	<; : 40>	13
//定价(默认人民币)	<注释 : 76>	14
STATUS	<标识符 : 1>	14
status	<标识符 : 1>	14
;	<; : 40>	14
//在借状态	<注释 : 76>	15
LENDER	<标识符 : 1>	15
*	<* : 56>	15
lender	<标识符 : 1>	15
;	<; : 40>	15
//若状态为借出,须写入,若为在馆,默认为NULL	<注释 : 76>	16
struct	<struct : 22>	16
Book	<标识符 : 1>	16
*	<* : 56>	16
next	<标识符 : 1>	16
;	<; : 40>	16
}	<} : 35>	17
BOOK	<标识符 : 1>	17
;	<; : 40>	17
typedef	<typedef : 25>	18
struct	<struct : 22>	18
Node	<标识符 : 1>	18
{	<{ : 34>	18
//查找功能需要的符合条件的链表的节点类型	<注释 : 76>	19
BOOK	<标识符 : 1>	19
*	<* : 56>	19
book_p	<标识符 : 1>	19
;	<; : 40>	19
struct	<struct : 22>	20
Node	<标识符 : 1>	20
*	<* : 56>	20
next	<标识符 : 1>	20
;	<; : 40>	20
}	<} : 35>	21
NODE	<标识符 : 1>	21
;	<; : 40>	21
int	<int : 3>	22
main	<标识符 : 1>	22
(	<( : 36>	22
)	<) : 37>	22
{	<{ : 34>	22
importBook	<标识符 : 1>	23
(	<( : 36>	23
)	<) : 37>	23
;	<; : 40>	23
while	<while : 12>	24
(	<( : 36>	24
1	<整数 : 70>	24
)	<) : 37>	24
{	<{ : 34>	24
showList	<标识符 : 1>	25
(	<( : 36>	25
)	<) : 37>	25
;	<; : 40>	25
int	<int : 3>	26
choose	<标识符 : 1>	26
=	<= : 66>	26
0	<整数 : 70>	26
;	<; : 40>	26
scanf	<标识符 : 1>	27
(	<( : 36>	27
"%d"	<字符串 : 73>	27
,	<, : 41>	27
&	<& : 58>	27
choose	<标识符 : 1>	27
)	<) : 37>	27
;	<; : 40>	27
fflush	<标识符 : 1>	28
(	<( : 36>	28
stdin	<标识符 : 1>	28
)	<) : 37>	28
;	<; : 40>	28
switch	<switch : 13>	29
(	<( : 36>	29
choose	<标识符 : 1>	29
)	<) : 37>	29
{	<{ : 34>	29
case	<case : 32>	30
1	<整数 : 70>	30
:	<: : 42>	30
{	<{ : 34>	30
addBook	<标识符 : 1>	30
(	<( : 36>	30
)	<) : 37>	30
;	<; : 40>	30
break	<break : 31>	30
;	<; : 40>	30
}	<} : 35>	30
case	<case : 32>	31
2	<整数 : 70>	31
:	<: : 42>	31
{	<{ : 34>	31
delBook	<标识符 : 1>	31
(	<( : 36>	31
)	<) : 37>	31
;	<; : 40>	31
break	<break : 31>	31
;	<; : 40>	31
}	<} : 35>	31
case	<case : 32>	32
3	<整数 : 70>	32
:	<: : 42>	32
{	<{ : 34>	32
modifyBook	<标识符 : 1>	32
(	<( : 36>	32
)	<) : 37>	32
;	<; : 40>	32
break	<break : 31>	32
;	<; : 40>	32
}	<} : 35>	32
case	<case : 32>	33
4	<整数 : 70>	33
:	<: : 42>	33
{	<{ : 34>	33
findBook	<标识符 : 1>	33
(	<( : 36>	33
)	<) : 37>	33
;	<; : 40>	33
break	<break : 31>	33
;	<; : 40>	33
}	<} : 35>	33
case	<case : 32>	34
5	<整数 : 70>	34
:	<: : 42>	34
{	<{ : 34>	34
stats	<标识符 : 1>	34
(	<( : 36>	34
)	<) : 37>	34
;	<; : 40>	34
break	<break : 31>	34
;	<; : 40>	34
}	<} : 35>	34
case	<case : 32>	35
6	<整数 : 70>	35
:	<: : 42>	35
{	<{ : 34>	35
system	<标识符 : 1>	35
(	<( : 36>	35
"cls"	<字符串 : 73>	35
)	<) : 37>	35
;	<; : 40>	35
break	<break : 31>	35
;	<; : 40>	35
}	<} : 35>	35
case	<case : 32>	36
7	<整数 : 70>	36
:	<: : 42>	36
{	<{ : 34>	36
printf	<标识符 : 1>	37
(	<( : 36>	37
"确定删除输入1,取消删除输入-1\n"	<字符串 : 73>	37
)	<) : 37>	37
;	<; : 40>	37
for	<for : 30>	37
(	<( : 36>	37
int	<int : 3>	37
i	<标识符 : 1>	37
=	<= : 66>	37
0	<整数 : 70>	37
;	<; : 40>	37
i	<标识符 : 1>	37
<	<< : 53>	37
40	<整数 : 70>	37
;	<; : 40>	37
i	<标识符 : 1>	37
+=	<+= : 46>	37
1	<整数 : 70>	37
)	<) : 37>	37
{	<{ : 34>	37
printf	<标识符 : 1>	37
(	<( : 36>	37
"%c"	<字符串 : 73>	37
,	<, : 41>	37
'~'	<字符 : 72>	37
)	<) : 37>	37
;	<; : 40>	37
}	<} : 35>	37
printf	<标识符 : 1>	37
(	<( : 36>	37
"\n"	<字符串 : 73>	37
)	<) : 37>	37
;	<; : 40>	37
int	<int : 3>	38
m	<标识符 : 1>	38
;	<; : 40>	38
if	<if : 18>	39
(	<( : 36>	39
inputInt	<标识符 : 1>	39
(	<( : 36>	39
&	<& : 58>	39
m	<标识符 : 1>	39
,	<, : 41>	39
"选择"	<字符串 : 73>	39
)	<) : 37>	39
==	<== : 67>	39
0	<整数 : 70>	39
)	<) : 37>	39
{	<{ : 34>	39
break	<break : 31>	39
;	<; : 40>	39
}	<} : 35>	39
if	<if : 18>	40
(	<( : 36>	40
m	<标识符 : 1>	40
==	<== : 67>	40
1	<整数 : 70>	40
)	<) : 37>	40
{	<{ : 34>	40
clearAll	<标识符 : 1>	40
(	<( : 36>	40
)	<) : 37>	40
;	<; : 40>	40
printf	<标识符 : 1>	40
(	<( : 36>	40
"初始化完成\n"	<字符串 : 73>	40
)	<) : 37>	40
;	<; : 40>	40
}	<} : 35>	40
break	<break : 31>	41
;	<; : 40>	41
}	<} : 35>	41
case	<case : 32>	42
-	<- : 50>	42
1	<整数 : 70>	42
:	<: : 42>	42
{	<{ : 34>	42
return	<return : 20>	42
1	<整数 : 70>	42
;	<; : 40>	42
}	<} : 35>	42
default	<default : 28>	43
:	<: : 42>	43
{	<{ : 34>	43
printf	<标识符 : 1>	43
(	<( : 36>	43
"提示!!! 没有这个选项\n"	<字符串 : 73>	43
)	<) : 37>	43
;	<; : 40>	43
}	<} : 35>	43
}	<} : 35>	44
}	<} : 35>	45
return	<return : 20>	46
1	<整数 : 70>	46
;	<; : 40>	46
}	<} : 35>	47
/*
清除所有
*/	<注释 : 76>	50
void	<void : 21>	51
clearAll	<标识符 : 1>	51
(	<( : 36>	51
)	<) : 37>	51
{	<{ : 34>	51
BOOK	<标识符 : 1>	52
*	<* : 56>	52
p	<标识符 : 1>	52
=	<= : 66>	52
head	<标识符 : 1>	52
->	<-> : 75>	52
next	<标识符 : 1>	52
;	<; : 40>	52
BOOK	<标识符 : 1>	53
*	<* : 56>	53
p2	<标识符 : 1>	53
;	<; : 40>	53
while	<while : 12>	54
(	<( : 36>	54
p	<标识符 : 1>	54
!=	<!= : 69>	54
NULL	<标识符 : 1>	54
)	<) : 37>	54
{	<{ : 34>	54
p2	<标识符 : 1>	55
=	<= : 66>	55
p	<标识符 : 1>	55
;	<; : 40>	55
p	<标识符 : 1>	56
=	<= : 66>	56
p	<标识符 : 1>	56
->	<-> : 75>	56
next	<标识符 : 1>	56
;	<; : 40>	56
free	<标识符 : 1>	57
(	<( : 36>	57
p2	<标识符 : 1>	57
)	<) : 37>	57
;	<; : 40>	57
}	<} : 35>	58
head	<标识符 : 1>	59
->	<-> : 75>	59
next	<标识符 : 1>	59
=	<= : 66>	59
NULL	<标识符 : 1>	59
;	<; : 40>	59
FILE	<标识符 : 1>	60
*	<* : 56>	60
data	<标识符 : 1>	60
=	<= : 66>	60
fopen	<标识符 : 1>	60
(	<( : 36>	60
"DATA.txt"	<字符串 : 73>	60
,	<, : 41>	60
"w"	<字符串 : 73>	60
)	<) : 37>	60
;	<; : 40>	60
fclose	<标识符 : 1>	61
(	<( : 36>	61
data	<标识符 : 1>	61
)	<) : 37>	61
;	<; : 40>	61
}	<} : 35>	62
void	<void : 21>	63
showList	<标识符 : 1>	63
(	<( : 36>	63
)	<) : 37>	63
{	<{ : 34>	63
printf	<标识符 : 1>	64
(	<( : 36>	64
"\n"	<字符串 : 73>	64
)	<) : 37>	64
;	<; : 40>	64
for	<for : 30>	65
(	<( : 36>	65
int	<int : 3>	65
i	<标识符 : 1>	65
=	<= : 66>	65
0	<整数 : 70>	65
;	<; : 40>	65
i	<标识符 : 1>	65
<	<< : 53>	65
85	<整数 : 70>	65
;	<; : 40>	65
i	<标识符 : 1>	65
+=	<+= : 46>	65
1	<整数 : 70>	65
)	<) : 37>	65
{	<{ : 34>	65
printf	<标识符 : 1>	65
(	<( : 36>	65
"~"	<字符串 : 73>	65
)	<) : 37>	65
;	<; : 40>	65
}	<} : 35>	65
printf	<标识符 : 1>	66
(	<( : 36>	66
"\n"	<字符串 : 73>	66
)	<) : 37>	66
;	<; : 40>	66
printf	<标识符 : 1>	67
(	<( : 36>	67
"  1:添加    2:删除    3:修改    4:查找    5:统计  |||  6:清屏    7:初始化    -1:关闭 \n\n*想退出已选择的功能,在可输入时输入-1即可.\n*中途退出添加不会保留正在录入的书\n"	<字符串 : 73>	67
)	<) : 37>	67
;	<; : 40>	67
printf	<标识符 : 1>	68
(	<( : 36>	68
"*未填写的项默认值为none或-1\n"	<字符串 : 73>	68
)	<) : 37>	68
;	<; : 40>	68
printf	<标识符 : 1>	69
(	<( : 36>	69
"\n"	<字符串 : 73>	69
)	<) : 37>	69
;	<; : 40>	69
for	<for : 30>	70
(	<( : 36>	70
int	<int : 3>	70
i	<标识符 : 1>	70
=	<= : 66>	70
0	<整数 : 70>	70
;	<; : 40>	70
i	<标识符 : 1>	70
<	<< : 53>	70
85	<整数 : 70>	70
;	<; : 40>	70
i	<标识符 : 1>	70
+=	<+= : 46>	70
1	<整数 : 70>	70
)	<) : 37>	70
{	<{ : 34>	70
printf	<标识符 : 1>	70
(	<( : 36>	70
"~"	<字符串 : 73>	70
)	<) : 37>	70
;	<; : 40>	70
}	<} : 35>	70
printf	<标识符 : 1>	71
(	<( : 36>	71
"\n"	<字符串 : 73>	71
)	<) : 37>	71
;	<; : 40>	71
printf	<标识符 : 1>	72
(	<( : 36>	72
"选择>>>"	<字符串 : 73>	72
)	<) : 37>	72
;	<; : 40>	72
}	<} : 35>	73
int	<int : 3>	74
modifyBook	<标识符 : 1>	74
(	<( : 36>	74
)	<) : 37>	74
{	<{ : 34>	74
showList2	<标识符 : 1>	75
(	<( : 36>	75
)	<) : 37>	75
;	<; : 40>	75
printf	<标识符 : 1>	76
(	<( : 36>	76
"提示!!! 当前正在进行筛选:\n"	<字符串 : 73>	76
)	<) : 37>	76
;	<; : 40>	76
for	<for : 30>	77
(	<( : 36>	77
int	<int : 3>	77
i	<标识符 : 1>	77
=	<= : 66>	77
0	<整数 : 70>	77
;	<; : 40>	77
i	<标识符 : 1>	77
<	<< : 53>	77
40	<整数 : 70>	77
;	<; : 40>	77
i	<标识符 : 1>	77
+=	<+= : 46>	77
1	<整数 : 70>	77
)	<) : 37>	77
{	<{ : 34>	77
printf	<标识符 : 1>	77
(	<( : 36>	77
"%c"	<字符串 : 73>	77
,	<, : 41>	77
'~'	<字符 : 72>	77
)	<) : 37>	77
;	<; : 40>	77
}	<} : 35>	77
printf	<标识符 : 1>	77
(	<( : 36>	77
"\n"	<字符串 : 73>	77
)	<) : 37>	77
;	<; : 40>	77
//多重属性筛选,每种属性只能选一次,否则得到结果为最后一次的输入,只支持完全相同匹配	<注释 : 76>	79
NODE	<标识符 : 1>	79
*	<* : 56>	79
head2	<标识符 : 1>	79
=	<= : 66>	79
(	<( : 36>	79
NODE	<标识符 : 1>	79
*	<* : 56>	79
)	<) : 37>	79
malloc	<标识符 : 1>	79
(	<( : 36>	79
sizeof	<sizeof : 26>	79
(	<( : 36>	79
NODE	<标识符 : 1>	79
)	<) : 37>	79
)	<) : 37>	79
;	<; : 40>	79
head2	<标识符 : 1>	80
->	<-> : 75>	80
next	<标识符 : 1>	80
=	<= : 66>	80
NULL	<标识符 : 1>	80
;	<; : 40>	80
BOOK	<标识符 : 1>	81
*	<* : 56>	81
p	<标识符 : 1>	81
=	<= : 66>	81
head	<标识符 : 1>	81
->	<-> : 75>	81
next	<标识符 : 1>	81
;	<; : 40>	81
while	<while : 12>	82
(	<( : 36>	82
p	<标识符 : 1>	82
)	<) : 37>	82
{	<{ : 34>	82
NODE	<标识符 : 1>	83
*	<* : 56>	83
p2	<标识符 : 1>	83
=	<= : 66>	83
(	<( : 36>	83
NODE	<标识符 : 1>	83
*	<* : 56>	83
)	<) : 37>	83
malloc	<标识符 : 1>	83
(	<( : 36>	83
sizeof	<sizeof : 26>	83
(	<( : 36>	83
NODE	<标识符 : 1>	83
)	<) : 37>	83
)	<) : 37>	83
;	<; : 40>	83
head2	<标识符 : 1>	84
->	<-> : 75>	84
book_p	<标识符 : 1>	84
=	<= : 66>	84
p	<标识符 : 1>	84
;	<; : 40>	84
p2	<标识符 : 1>	85
->	<-> : 75>	85
next	<标识符 : 1>	85
=	<= : 66>	85
head2	<标识符 : 1>	85
;	<; : 40>	85
head2	<标识符 : 1>	86
=	<= : 66>	86
p2	<标识符 : 1>	86
;	<; : 40>	86
p	<标识符 : 1>	87
=	<= : 66>	87
p	<标识符 : 1>	87
->	<-> : 75>	87
next	<标识符 : 1>	87
;	<; : 40>	87
}	<} : 35>	88
//排除第一次输入13的情况	<注释 : 76>	91
int	<int : 3>	91
o	<标识符 : 1>	91
;	<; : 40>	91
char	<char : 24>	92
str2	<标识符 : 1>	92
[	<[ : 38>	92
50	<整数 : 70>	92
]	<] : 39>	92
;	<; : 40>	92
back2	<标识符 : 1>	93
:	<: : 42>	93
if	<if : 18>	94
(	<( : 36>	94
inputInt	<标识符 : 1>	94
(	<( : 36>	94
&	<& : 58>	94
o	<标识符 : 1>	94
,	<, : 41>	94
"选择"	<字符串 : 73>	94
)	<) : 37>	94
==	<== : 67>	94
0	<整数 : 70>	94
)	<) : 37>	94
{	<{ : 34>	94
clearAllNode	<标识符 : 1>	94
(	<( : 36>	94
head2	<标识符 : 1>	94
)	<) : 37>	94
;	<; : 40>	94
return	<return : 20>	94
0	<整数 : 70>	94
;	<; : 40>	94
}	<} : 35>	94
if	<if : 18>	95
(	<( : 36>	95
checkChoose	<标识符 : 1>	95
(	<( : 36>	95
o	<标识符 : 1>	95
,	<, : 41>	95
13	<整数 : 70>	95
)	<) : 37>	95
==	<== : 67>	95
0	<整数 : 70>	95
)	<) : 37>	95
{	<{ : 34>	95
goto	<goto : 17>	95
back2	<标识符 : 1>	95
;	<; : 40>	95
}	<} : 35>	95
if	<if : 18>	96
(	<( : 36>	96
o	<标识符 : 1>	96
==	<== : 67>	96
13	<整数 : 70>	96
)	<) : 37>	96
{	<{ : 34>	96
return	<return : 20>	96
0	<整数 : 70>	96
;	<; : 40>	96
}	<} : 35>	96
if	<if : 18>	97
(	<( : 36>	97
inputStr	<标识符 : 1>	97
(	<( : 36>	97
str2	<标识符 : 1>	97
,	<, : 41>	97
attribute_chinese	<标识符 : 1>	97
[	<[ : 38>	97
o	<标识符 : 1>	97
-	<- : 50>	97
1	<整数 : 70>	97
]	<] : 39>	97
)	<) : 37>	97
==	<== : 67>	97
0	<整数 : 70>	97
)	<) : 37>	97
{	<{ : 34>	97
clearAllNode	<标识符 : 1>	97
(	<( : 36>	97
head2	<标识符 : 1>	97
)	<) : 37>	97
;	<; : 40>	97
return	<return : 20>	97
0	<整数 : 70>	97
;	<; : 40>	97
}	<} : 35>	97
head2	<标识符 : 1>	98
=	<= : 66>	98
exactFind	<标识符 : 1>	98
(	<( : 36>	98
head2	<标识符 : 1>	98
,	<, : 41>	98
o	<标识符 : 1>	98
,	<, : 41>	98
str2	<标识符 : 1>	98
)	<) : 37>	98
;	<; : 40>	98
while	<while : 12>	99
(	<( : 36>	99
1	<整数 : 70>	99
)	<) : 37>	99
{	<{ : 34>	99
//循环筛选	<注释 : 76>	100
int	<int : 3>	100
n	<标识符 : 1>	100
;	<; : 40>	100
char	<char : 24>	101
str	<标识符 : 1>	101
[	<[ : 38>	101
50	<整数 : 70>	101
]	<] : 39>	101
;	<; : 40>	101
if	<if : 18>	102
(	<( : 36>	102
inputInt	<标识符 : 1>	102
(	<( : 36>	102
&	<& : 58>	102
n	<标识符 : 1>	102
,	<, : 41>	102
"选择"	<字符串 : 73>	102
)	<) : 37>	102
==	<== : 67>	102
0	<整数 : 70>	102
)	<) : 37>	102
{	<{ : 34>	102
clearAllNode	<标识符 : 1>	102
(	<( : 36>	102
head2	<标识符 : 1>	102
)	<) : 37>	102
;	<; : 40>	102
return	<return : 20>	102
0	<整数 : 70>	102
;	<; : 40>	102
}	<} : 35>	102
if	<if : 18>	103
(	<( : 36>	103
checkChoose	<标识符 : 1>	103
(	<( : 36>	103
n	<标识符 : 1>	103
,	<, : 41>	103
13	<整数 : 70>	103
)	<) : 37>	103
==	<== : 67>	103
0	<整数 : 70>	103
)	<) : 37>	103
{	<{ : 34>	103
continue	<continue : 14>	103
;	<; : 40>	103
}	<} : 35>	103
if	<if : 18>	104
(	<( : 36>	104
n	<标识符 : 1>	104
==	<== : 67>	104
13	<整数 : 70>	104
)	<) : 37>	104
{	<{ : 34>	104
break	<break : 31>	104
;	<; : 40>	104
}	<} : 35>	104
if	<if : 18>	106
(	<( : 36>	106
inputStr	<标识符 : 1>	106
(	<( : 36>	106
str	<标识符 : 1>	106
,	<, : 41>	106
attribute_chinese	<标识符 : 1>	106
[	<[ : 38>	106
n	<标识符 : 1>	106
-	<- : 50>	106
1	<整数 : 70>	106
]	<] : 39>	106
)	<) : 37>	106
==	<== : 67>	106
0	<整数 : 70>	106
)	<) : 37>	106
{	<{ : 34>	106
clearAllNode	<标识符 : 1>	106
(	<( : 36>	106
head2	<标识符 : 1>	106
)	<) : 37>	106
;	<; : 40>	106
return	<return : 20>	106
0	<整数 : 70>	106
;	<; : 40>	106
}	<} : 35>	106
head2	<标识符 : 1>	107
=	<= : 66>	107
exactFind	<标识符 : 1>	107
(	<( : 36>	107
head2	<标识符 : 1>	107
,	<, : 41>	107
n	<标识符 : 1>	107
,	<, : 41>	107
str	<标识符 : 1>	107
)	<) : 37>	107
;	<; : 40>	107
}	<} : 35>	108
if	<if : 18>	109
(	<( : 36>	109
head2	<标识符 : 1>	109
->	<-> : 75>	109
next	<标识符 : 1>	109
==	<== : 67>	109
NULL	<标识符 : 1>	109
)	<) : 37>	109
{	<{ : 34>	109
printf	<标识符 : 1>	109
(	<( : 36>	109
"提示!!! 没有找到\n"	<字符串 : 73>	109
)	<) : 37>	109
;	<; : 40>	109
return	<return : 20>	109
0	<整数 : 70>	109
;	<; : 40>	109
}	<} : 35>	109
showLine	<标识符 : 1>	110
(	<( : 36>	110
)	<) : 37>	110
;	<; : 40>	110
NODE	<标识符 : 1>	111
*	<* : 56>	111
pp	<标识符 : 1>	111
=	<= : 66>	111
head2	<标识符 : 1>	111
->	<-> : 75>	111
next	<标识符 : 1>	111
;	<; : 40>	111
while	<while : 12>	112
(	<( : 36>	112
pp	<标识符 : 1>	112
)	<) : 37>	112
{	<{ : 34>	112
showBook	<标识符 : 1>	113
(	<( : 36>	113
pp	<标识符 : 1>	113
->	<-> : 75>	113
book_p	<标识符 : 1>	113
)	<) : 37>	113
;	<; : 40>	113
pp	<标识符 : 1>	114
=	<= : 66>	114
pp	<标识符 : 1>	114
->	<-> : 75>	114
next	<标识符 : 1>	114
;	<; : 40>	114
}	<} : 35>	115
/////////////////////////选择属性修改//////////////////////////////	<注释 : 76>	117
showList2	<标识符 : 1>	117
(	<( : 36>	117
)	<) : 37>	117
;	<; : 40>	117
printf	<标识符 : 1>	118
(	<( : 36>	118
"提示!!! 当前正在进行进行写入新属性,选项13在此处作废:,退出统一输入-1\n"	<字符串 : 73>	118
)	<) : 37>	118
;	<; : 40>	118
for	<for : 30>	119
(	<( : 36>	119
int	<int : 3>	119
i	<标识符 : 1>	119
=	<= : 66>	119
0	<整数 : 70>	119
;	<; : 40>	119
i	<标识符 : 1>	119
<	<< : 53>	119
40	<整数 : 70>	119
;	<; : 40>	119
i	<标识符 : 1>	119
+=	<+= : 46>	119
1	<整数 : 70>	119
)	<) : 37>	119
{	<{ : 34>	119
printf	<标识符 : 1>	119
(	<( : 36>	119
"%c"	<字符串 : 73>	119
,	<, : 41>	119
'~'	<字符 : 72>	119
)	<) : 37>	119
;	<; : 40>	119
}	<} : 35>	119
printf	<标识符 : 1>	119
(	<( : 36>	119
"\n"	<字符串 : 73>	119
)	<) : 37>	119
;	<; : 40>	119
while	<while : 12>	120
(	<( : 36>	120
1	<整数 : 70>	120
)	<) : 37>	120
{	<{ : 34>	120
int	<int : 3>	121
m	<标识符 : 1>	121
;	<; : 40>	121
char	<char : 24>	122
str3	<标识符 : 1>	122
[	<[ : 38>	122
50	<整数 : 70>	122
]	<] : 39>	122
;	<; : 40>	122
pic	<标识符 : 1>	123
:	<: : 42>	123
if	<if : 18>	124
(	<( : 36>	124
inputInt	<标识符 : 1>	124
(	<( : 36>	124
&	<& : 58>	124
m	<标识符 : 1>	124
,	<, : 41>	124
"选择"	<字符串 : 73>	124
)	<) : 37>	124
==	<== : 67>	124
0	<整数 : 70>	124
)	<) : 37>	124
{	<{ : 34>	124
clearAllNode	<标识符 : 1>	124
(	<( : 36>	124
head2	<标识符 : 1>	124
)	<) : 37>	124
;	<; : 40>	124
return	<return : 20>	124
0	<整数 : 70>	124
;	<; : 40>	124
}	<} : 35>	124
if	<if : 18>	125
(	<( : 36>	125
checkChoose	<标识符 : 1>	125
(	<( : 36>	125
m	<标识符 : 1>	125
,	<, : 41>	125
13	<整数 : 70>	125
)	<) : 37>	125
==	<== : 67>	125
0	<整数 : 70>	125
)	<) : 37>	125
{	<{ : 34>	125
continue	<continue : 14>	125
;	<; : 40>	125
}	<} : 35>	125
if	<if : 18>	126
(	<( : 36>	126
m	<标识符 : 1>	126
==	<== : 67>	126
1	<整数 : 70>	126
&&	<&& : 59>	126
head2	<标识符 : 1>	126
->	<-> : 75>	126
next	<标识符 : 1>	126
->	<-> : 75>	126
next	<标识符 : 1>	126
!=	<!= : 69>	126
NULL	<标识符 : 1>	126
)	<) : 37>	126
{	<{ : 34>	126
printf	<标识符 : 1>	126
(	<( : 36>	126
"提示!!! 登记号不能批量修改\n"	<字符串 : 73>	126
)	<) : 37>	126
;	<; : 40>	126
goto	<goto : 17>	126
pic	<标识符 : 1>	126
;	<; : 40>	126
}	<} : 35>	126
a1	<标识符 : 1>	127
:	<: : 42>	127
if	<if : 18>	128
(	<( : 36>	128
inputStr	<标识符 : 1>	128
(	<( : 36>	128
str3	<标识符 : 1>	128
,	<, : 41>	128
attribute_chinese	<标识符 : 1>	128
[	<[ : 38>	128
m	<标识符 : 1>	128
-	<- : 50>	128
1	<整数 : 70>	128
]	<] : 39>	128
)	<) : 37>	128
==	<== : 67>	128
0	<整数 : 70>	128
)	<) : 37>	128
{	<{ : 34>	128
clearAllNode	<标识符 : 1>	128
(	<( : 36>	128
head2	<标识符 : 1>	128
)	<) : 37>	128
;	<; : 40>	128
return	<return : 20>	128
0	<整数 : 70>	128
;	<; : 40>	128
}	<} : 35>	128
if	<if : 18>	129
(	<( : 36>	129
m	<标识符 : 1>	129
==	<== : 67>	129
1	<整数 : 70>	129
)	<) : 37>	129
{	<{ : 34>	129
if	<if : 18>	129
(	<( : 36>	129
checkRegister_num	<标识符 : 1>	129
(	<( : 36>	129
str3	<标识符 : 1>	129
)	<) : 37>	129
==	<== : 67>	129
0	<整数 : 70>	129
)	<) : 37>	129
{	<{ : 34>	129
goto	<goto : 17>	129
a1	<标识符 : 1>	129
;	<; : 40>	129
}	<} : 35>	129
}	<} : 35>	129
modifyTxt	<标识符 : 1>	130
(	<( : 36>	130
head2	<标识符 : 1>	130
)	<) : 37>	130
;	<; : 40>	130
modifyMemory	<标识符 : 1>	131
(	<( : 36>	131
m	<标识符 : 1>	131
,	<, : 41>	131
head2	<标识符 : 1>	131
,	<, : 41>	131
str3	<标识符 : 1>	131
)	<) : 37>	131
;	<; : 40>	131
//写入内存	<注释 : 76>	132
modifyTxt2	<标识符 : 1>	132
(	<( : 36>	132
head2	<标识符 : 1>	132
)	<) : 37>	132
;	<; : 40>	132
//再写入新文档	<注释 : 76>	133
printf	<标识符 : 1>	133
(	<( : 36>	133
"修改成功\n"	<字符串 : 73>	133
)	<) : 37>	133
;	<; : 40>	133
}	<} : 35>	134
return	<return : 20>	135
1	<整数 : 70>	135
;	<; : 40>	135
}	<} : 35>	136
void	<void : 21>	137
modifyMemory	<标识符 : 1>	137
(	<( : 36>	137
int	<int : 3>	137
m	<标识符 : 1>	137
,	<, : 41>	137
NODE	<标识符 : 1>	137
*	<* : 56>	137
h	<标识符 : 1>	137
,	<, : 41>	137
char	<char : 24>	137
*	<* : 56>	137
str	<标识符 : 1>	137
)	<) : 37>	137
{	<{ : 34>	137
NODE	<标识符 : 1>	138
*	<* : 56>	138
p	<标识符 : 1>	138
=	<= : 66>	138
h	<标识符 : 1>	138
->	<-> : 75>	138
next	<标识符 : 1>	138
;	<; : 40>	138
while	<while : 12>	139
(	<( : 36>	139
p	<标识符 : 1>	139
)	<) : 37>	139
{	<{ : 34>	139
switch	<switch : 13>	140
(	<( : 36>	140
m	<标识符 : 1>	140
)	<) : 37>	140
{	<{ : 34>	140
case	<case : 32>	141
1	<整数 : 70>	141
:	<: : 42>	141
{	<{ : 34>	141
strcpy	<标识符 : 1>	141
(	<( : 36>	141
p	<标识符 : 1>	141
->	<-> : 75>	141
book_p	<标识符 : 1>	141
->	<-> : 75>	141
register_num	<标识符 : 1>	141
,	<, : 41>	141
str	<标识符 : 1>	141
)	<) : 37>	141
;	<; : 40>	141
break	<break : 31>	141
;	<; : 40>	141
}	<} : 35>	141
case	<case : 32>	142
2	<整数 : 70>	142
:	<: : 42>	142
{	<{ : 34>	142
strcpy	<标识符 : 1>	142
(	<( : 36>	142
p	<标识符 : 1>	142
->	<-> : 75>	142
book_p	<标识符 : 1>	142
->	<-> : 75>	142
batch	<标识符 : 1>	142
,	<, : 41>	142
str	<标识符 : 1>	142
)	<) : 37>	142
;	<; : 40>	142
break	<break : 31>	142
;	<; : 40>	142
}	<} : 35>	142
case	<case : 32>	143
3	<整数 : 70>	143
:	<: : 42>	143
{	<{ : 34>	143
strcpy	<标识符 : 1>	143
(	<( : 36>	143
p	<标识符 : 1>	143
->	<-> : 75>	143
book_p	<标识符 : 1>	143
->	<-> : 75>	143
seek_num	<标识符 : 1>	143
,	<, : 41>	143
str	<标识符 : 1>	143
)	<) : 37>	143
;	<; : 40>	143
break	<break : 31>	143
;	<; : 40>	143
}	<} : 35>	143
case	<case : 32>	144
4	<整数 : 70>	144
:	<: : 42>	144
{	<{ : 34>	144
p	<标识符 : 1>	144
->	<-> : 75>	144
book_p	<标识符 : 1>	144
->	<-> : 75>	144
frequency	<标识符 : 1>	144
=	<= : 66>	144
atoi	<标识符 : 1>	144
(	<( : 36>	144
str	<标识符 : 1>	144
)	<) : 37>	144
;	<; : 40>	144
break	<break : 31>	144
;	<; : 40>	144
}	<} : 35>	144
case	<case : 32>	145
5	<整数 : 70>	145
:	<: : 42>	145
{	<{ : 34>	145
strcpy	<标识符 : 1>	145
(	<( : 36>	145
p	<标识符 : 1>	145
->	<-> : 75>	145
book_p	<标识符 : 1>	145
->	<-> : 75>	145
name	<标识符 : 1>	145
,	<, : 41>	145
str	<标识符 : 1>	145
)	<) : 37>	145
;	<; : 40>	145
break	<break : 31>	145
;	<; : 40>	145
}	<} : 35>	145
case	<case : 32>	146
6	<整数 : 70>	146
:	<: : 42>	146
{	<{ : 34>	146
strcpy	<标识符 : 1>	146
(	<( : 36>	146
p	<标识符 : 1>	146
->	<-> : 75>	146
book_p	<标识符 : 1>	146
->	<-> : 75>	146
author	<标识符 : 1>	146
,	<, : 41>	146
str	<标识符 : 1>	146
)	<) : 37>	146
;	<; : 40>	146
break	<break : 31>	146
;	<; : 40>	146
}	<} : 35>	146
case	<case : 32>	147
7	<整数 : 70>	147
:	<: : 42>	147
{	<{ : 34>	147
strcpy	<标识符 : 1>	147
(	<( : 36>	147
p	<标识符 : 1>	147
->	<-> : 75>	147
book_p	<标识符 : 1>	147
->	<-> : 75>	147
publisher	<标识符 : 1>	147
,	<, : 41>	147
str	<标识符 : 1>	147
)	<) : 37>	147
;	<; : 40>	147
break	<break : 31>	147
;	<; : 40>	147
}	<} : 35>	147
case	<case : 32>	148
8	<整数 : 70>	148
:	<: : 42>	148
{	<{ : 34>	148
strcpy	<标识符 : 1>	148
(	<( : 36>	148
p	<标识符 : 1>	148
->	<-> : 75>	148
book_p	<标识符 : 1>	148
->	<-> : 75>	148
isbn	<标识符 : 1>	148
,	<, : 41>	148
str	<标识符 : 1>	148
)	<) : 37>	148
;	<; : 40>	148
break	<break : 31>	148
;	<; : 40>	148
}	<} : 35>	148
case	<case : 32>	149
9	<整数 : 70>	149
:	<: : 42>	149
{	<{ : 34>	149
p	<标识符 : 1>	149
->	<-> : 75>	149
book_p	<标识符 : 1>	149
->	<-> : 75>	149
price	<标识符 : 1>	149
=	<= : 66>	149
atof	<标识符 : 1>	149
(	<( : 36>	149
str	<标识符 : 1>	149
)	<) : 37>	149
;	<; : 40>	149
break	<break : 31>	149
;	<; : 40>	149
}	<} : 35>	149
case	<case : 32>	150
10	<整数 : 70>	150
:	<: : 42>	150
{	<{ : 34>	150
p	<标识符 : 1>	151
->	<-> : 75>	151
book_p	<标识符 : 1>	151
->	<-> : 75>	151
status	<标识符 : 1>	151
=	<= : 66>	151
atoi	<标识符 : 1>	151
(	<( : 36>	151
str	<标识符 : 1>	151
)	<) : 37>	151
;	<; : 40>	151
if	<if : 18>	152
(	<( : 36>	152
p	<标识符 : 1>	152
->	<-> : 75>	152
book_p	<标识符 : 1>	152
->	<-> : 75>	152
status	<标识符 : 1>	152
==	<== : 67>	152
1	<整数 : 70>	152
)	<) : 37>	152
{	<{ : 34>	152
inputStr	<标识符 : 1>	153
(	<( : 36>	153
p	<标识符 : 1>	153
->	<-> : 75>	153
book_p	<标识符 : 1>	153
->	<-> : 75>	153
lender	<标识符 : 1>	153
->	<-> : 75>	153
time	<标识符 : 1>	153
,	<, : 41>	153
attribute_chinese	<标识符 : 1>	153
[	<[ : 38>	153
10	<整数 : 70>	153
]	<] : 39>	153
)	<) : 37>	153
;	<; : 40>	153
inputStr	<标识符 : 1>	154
(	<( : 36>	154
p	<标识符 : 1>	154
->	<-> : 75>	154
book_p	<标识符 : 1>	154
->	<-> : 75>	154
lender	<标识符 : 1>	154
->	<-> : 75>	154
id	<标识符 : 1>	154
,	<, : 41>	154
attribute_chinese	<标识符 : 1>	154
[	<[ : 38>	154
11	<整数 : 70>	154
]	<] : 39>	154
)	<) : 37>	154
;	<; : 40>	154
}	<} : 35>	155
break	<break : 31>	156
;	<; : 40>	156
}	<} : 35>	156
case	<case : 32>	157
11	<整数 : 70>	157
:	<: : 42>	157
{	<{ : 34>	157
if	<if : 18>	158
(	<( : 36>	158
p	<标识符 : 1>	158
->	<-> : 75>	158
book_p	<标识符 : 1>	158
->	<-> : 75>	158
status	<标识符 : 1>	158
==	<== : 67>	158
1	<整数 : 70>	158
)	<) : 37>	158
{	<{ : 34>	158
strcpy	<标识符 : 1>	158
(	<( : 36>	158
p	<标识符 : 1>	158
->	<-> : 75>	158
book_p	<标识符 : 1>	158
->	<-> : 75>	158
lender	<标识符 : 1>	158
->	<-> : 75>	158
time	<标识符 : 1>	158
,	<, : 41>	158
str	<标识符 : 1>	158
)	<) : 37>	158
;	<; : 40>	158
}	<} : 35>	158
else	<else : 19>	159
{	<{ : 34>	159
printf	<标识符 : 1>	159
(	<( : 36>	159
"提示!!! 状态为在馆\n"	<字符串 : 73>	159
)	<) : 37>	159
;	<; : 40>	159
}	<} : 35>	159
break	<break : 31>	159
;	<; : 40>	159
}	<} : 35>	159
case	<case : 32>	160
12	<整数 : 70>	160
:	<: : 42>	160
{	<{ : 34>	160
if	<if : 18>	161
(	<( : 36>	161
p	<标识符 : 1>	161
->	<-> : 75>	161
book_p	<标识符 : 1>	161
->	<-> : 75>	161
status	<标识符 : 1>	161
==	<== : 67>	161
1	<整数 : 70>	161
)	<) : 37>	161
{	<{ : 34>	161
strcpy	<标识符 : 1>	161
(	<( : 36>	161
p	<标识符 : 1>	161
->	<-> : 75>	161
book_p	<标识符 : 1>	161
->	<-> : 75>	161
lender	<标识符 : 1>	161
->	<-> : 75>	161
id	<标识符 : 1>	161
,	<, : 41>	161
str	<标识符 : 1>	161
)	<) : 37>	161
;	<; : 40>	161
}	<} : 35>	161
else	<else : 19>	162
{	<{ : 34>	162
printf	<标识符 : 1>	162
(	<( : 36>	162
"提示!!! 状态为在馆\n"	<字符串 : 73>	162
)	<) : 37>	162
;	<; : 40>	162
}	<} : 35>	162
break	<break : 31>	162
;	<; : 40>	162
}	<} : 35>	162
default	<default : 28>	163
:	<: : 42>	163
{	<{ : 34>	163
printf	<标识符 : 1>	163
(	<( : 36>	163
"没有此选项\n"	<字符串 : 73>	163
)	<) : 37>	163
;	<; : 40>	163
}	<} : 35>	163
}	<} : 35>	164
p	<标识符 : 1>	165
=	<= : 66>	165
p	<标识符 : 1>	165
->	<-> : 75>	165
next	<标识符 : 1>	165
;	<; : 40>	165
}	<} : 35>	166
}	<} : 35>	167
void	<void : 21>	170
modifyTxt	<标识符 : 1>	170
(	<( : 36>	170
NODE	<标识符 : 1>	170
*	<* : 56>	170
h	<标识符 : 1>	170
)	<) : 37>	170
{	<{ : 34>	170
FILE	<标识符 : 1>	171
*	<* : 56>	171
data	<标识符 : 1>	171
=	<= : 66>	171
fopen	<标识符 : 1>	171
(	<( : 36>	171
"DATA.txt"	<字符串 : 73>	171
,	<, : 41>	171
"a+"	<字符串 : 73>	171
)	<) : 37>	171
;	<; : 40>	171
FILE	<标识符 : 1>	172
*	<* : 56>	172
data2	<标识符 : 1>	172
=	<= : 66>	172
fopen	<标识符 : 1>	172
(	<( : 36>	172
"DATA2.txt"	<字符串 : 73>	172
,	<, : 41>	172
"w"	<字符串 : 73>	172
)	<) : 37>	172
;	<; : 40>	172
printf	<标识符 : 1>	173
(	<( : 36>	173
"修改文档中......\n"	<字符串 : 73>	173
)	<) : 37>	173
;	<; : 40>	173
fseek	<标识符 : 1>	174
(	<( : 36>	174
data	<标识符 : 1>	174
,	<, : 41>	174
0	<整数 : 70>	174
L	<标识符 : 1>	174
,	<, : 41>	174
0	<整数 : 70>	174
)	<) : 37>	174
;	<; : 40>	174
char	<char : 24>	175
str	<标识符 : 1>	175
[	<[ : 38>	175
500	<整数 : 70>	175
]	<] : 39>	175
;	<; : 40>	175
while	<while : 12>	176
(	<( : 36>	176
fgets	<标识符 : 1>	176
(	<( : 36>	176
str	<标识符 : 1>	176
,	<, : 41>	176
500	<整数 : 70>	176
,	<, : 41>	176
data	<标识符 : 1>	176
)	<) : 37>	176
!=	<!= : 69>	176
NULL	<标识符 : 1>	176
)	<) : 37>	176
{	<{ : 34>	176
if	<if : 18>	177
(	<( : 36>	177
str	<标识符 : 1>	177
[	<[ : 38>	177
0	<整数 : 70>	177
]	<] : 39>	177
==	<== : 67>	177
'\n'	<字符 : 72>	177
)	<) : 37>	177
{	<{ : 34>	177
continue	<continue : 14>	177
;	<; : 40>	177
}	<} : 35>	177
char	<char : 24>	178
s	<标识符 : 1>	178
[	<[ : 38>	178
50	<整数 : 70>	178
]	<] : 39>	178
;	<; : 40>	178
int	<int : 3>	179
i	<标识符 : 1>	179
=	<= : 66>	179
0	<整数 : 70>	179
;	<; : 40>	179
for	<for : 30>	180
(	<( : 36>	180
;	<; : 40>	180
str	<标识符 : 1>	180
[	<[ : 38>	180
i	<标识符 : 1>	180
]	<] : 39>	180
!=	<!= : 69>	180
MARK	<标识符 : 1>	180
;	<; : 40>	180
i	<标识符 : 1>	180
+=	<+= : 46>	180
1	<整数 : 70>	180
)	<) : 37>	180
{	<{ : 34>	180
s	<标识符 : 1>	181
[	<[ : 38>	181
i	<标识符 : 1>	181
]	<] : 39>	181
=	<= : 66>	181
str	<标识符 : 1>	181
[	<[ : 38>	181
i	<标识符 : 1>	181
]	<] : 39>	181
;	<; : 40>	181
}	<} : 35>	182
s	<标识符 : 1>	183
[	<[ : 38>	183
i	<标识符 : 1>	183
]	<] : 39>	183
=	<= : 66>	183
'\0'	<字符 : 72>	183
;	<; : 40>	183
NODE	<标识符 : 1>	185
*	<* : 56>	185
p	<标识符 : 1>	185
=	<= : 66>	185
h	<标识符 : 1>	185
->	<-> : 75>	185
next	<标识符 : 1>	185
;	<; : 40>	185
int	<int : 3>	186
u	<标识符 : 1>	186
=	<= : 66>	186
1	<整数 : 70>	186
;	<; : 40>	186
while	<while : 12>	187
(	<( : 36>	187
p	<标识符 : 1>	187
)	<) : 37>	187
{	<{ : 34>	187
if	<if : 18>	188
(	<( : 36>	188
strcmp	<标识符 : 1>	188
(	<( : 36>	188
p	<标识符 : 1>	188
->	<-> : 75>	188
book_p	<标识符 : 1>	188
->	<-> : 75>	188
register_num	<标识符 : 1>	188
,	<, : 41>	188
s	<标识符 : 1>	188
)	<) : 37>	188
==	<== : 67>	188
0	<整数 : 70>	188
)	<) : 37>	188
{	<{ : 34>	188
u	<标识符 : 1>	188
=	<= : 66>	188
0	<整数 : 70>	188
;	<; : 40>	188
break	<break : 31>	188
;	<; : 40>	188
}	<} : 35>	188
p	<标识符 : 1>	189
=	<= : 66>	189
p	<标识符 : 1>	189
->	<-> : 75>	189
next	<标识符 : 1>	189
;	<; : 40>	189
}	<} : 35>	190
if	<if : 18>	191
(	<( : 36>	191
u	<标识符 : 1>	191
==	<== : 67>	191
1	<整数 : 70>	191
)	<) : 37>	191
{	<{ : 34>	191
fputs	<标识符 : 1>	191
(	<( : 36>	191
str	<标识符 : 1>	191
,	<, : 41>	191
data2	<标识符 : 1>	191
)	<) : 37>	191
;	<; : 40>	191
}	<} : 35>	191
}	<} : 35>	192
fclose	<标识符 : 1>	193
(	<( : 36>	193
data	<标识符 : 1>	193
)	<) : 37>	193
;	<; : 40>	193
fclose	<标识符 : 1>	194
(	<( : 36>	194
data2	<标识符 : 1>	194
)	<) : 37>	194
;	<; : 40>	194
rename	<标识符 : 1>	195
(	<( : 36>	195
RODE2	<标识符 : 1>	195
,	<, : 41>	195
RODE3	<标识符 : 1>	195
)	<) : 37>	195
;	<; : 40>	195
rename	<标识符 : 1>	196
(	<( : 36>	196
RODE1	<标识符 : 1>	196
,	<, : 41>	196
RODE2	<标识符 : 1>	196
)	<) : 37>	196
;	<; : 40>	196
rename	<标识符 : 1>	197
(	<( : 36>	197
RODE3	<标识符 : 1>	197
,	<, : 41>	197
RODE1	<标识符 : 1>	197
)	<) : 37>	197
;	<; : 40>	197
}	<} : 35>	198
void	<void : 21>	199
modifyTxt2	<标识符 : 1>	199
(	<( : 36>	199
NODE	<标识符 : 1>	199
*	<* : 56>	199
h	<标识符 : 1>	199
)	<) : 37>	199
{	<{ : 34>	199
FILE	<标识符 : 1>	200
*	<* : 56>	200
data	<标识符 : 1>	200
=	<= : 66>	200
fopen	<标识符 : 1>	200
(	<( : 36>	200
"DATA.txt"	<字符串 : 73>	200
,	<, : 41>	200
"a+"	<字符串 : 73>	200
)	<) : 37>	200
;	<; : 40>	200
NODE	<标识符 : 1>	201
*	<* : 56>	201
p2	<标识符 : 1>	201
=	<= : 66>	201
h	<标识符 : 1>	201
->	<-> : 75>	201
next	<标识符 : 1>	201
;	<; : 40>	201
while	<while : 12>	202
(	<( : 36>	202
p2	<标识符 : 1>	202
)	<) : 37>	202
{	<{ : 34>	202
writeTxt	<标识符 : 1>	203
(	<( : 36>	203
p2	<标识符 : 1>	203
->	<-> : 75>	203
book_p	<标识符 : 1>	203
,	<, : 41>	203
data	<标识符 : 1>	203
)	<) : 37>	203
;	<; : 40>	203
p2	<标识符 : 1>	204
=	<= : 66>	204
p2	<标识符 : 1>	204
->	<-> : 75>	204
next	<标识符 : 1>	204
;	<; : 40>	204
}	<} : 35>	205
fclose	<标识符 : 1>	206
(	<( : 36>	206
data	<标识符 : 1>	206
)	<) : 37>	206
;	<; : 40>	206
}	<} : 35>	207
NODE	<标识符 : 1>	209
*	<* : 56>	209
exactFind	<标识符 : 1>	209
(	<( : 36>	209
NODE	<标识符 : 1>	209
*	<* : 56>	209
head2	<标识符 : 1>	209
,	<, : 41>	209
int	<int : 3>	209
n	<标识符 : 1>	209
,	<, : 41>	209
char	<char : 24>	209
*	<* : 56>	209
str	<标识符 : 1>	209
)	<) : 37>	209
{	<{ : 34>	209
//和partFind函数差不多,为了方便,还是分开	<注释 : 76>	210
NODE	<标识符 : 1>	210
*	<* : 56>	210
head3	<标识符 : 1>	210
=	<= : 66>	210
(	<( : 36>	210
NODE	<标识符 : 1>	210
*	<* : 56>	210
)	<) : 37>	210
malloc	<标识符 : 1>	210
(	<( : 36>	210
sizeof	<sizeof : 26>	210
(	<( : 36>	210
NODE	<标识符 : 1>	210
)	<) : 37>	210
)	<) : 37>	210
;	<; : 40>	210
head3	<标识符 : 1>	211
->	<-> : 75>	211
next	<标识符 : 1>	211
=	<= : 66>	211
NULL	<标识符 : 1>	211
;	<; : 40>	211
NODE	<标识符 : 1>	212
*	<* : 56>	212
p2	<标识符 : 1>	212
=	<= : 66>	212
head2	<标识符 : 1>	212
->	<-> : 75>	212
next	<标识符 : 1>	212
;	<; : 40>	212
while	<while : 12>	213
(	<( : 36>	213
p2	<标识符 : 1>	213
)	<) : 37>	213
{	<{ : 34>	213
int	<int : 3>	214
m	<标识符 : 1>	214
=	<= : 66>	214
0	<整数 : 70>	214
;	<; : 40>	214
//将head2链表的符合条件的写入新的链表,并删除head2链表	<注释 : 76>	215
switch	<switch : 13>	215
(	<( : 36>	215
n	<标识符 : 1>	215
)	<) : 37>	215
{	<{ : 34>	215
case	<case : 32>	216
1	<整数 : 70>	216
:	<: : 42>	216
{	<{ : 34>	216
if	<if : 18>	216
(	<( : 36>	216
strcmp	<标识符 : 1>	216
(	<( : 36>	216
p2	<标识符 : 1>	216
->	<-> : 75>	216
book_p	<标识符 : 1>	216
->	<-> : 75>	216
register_num	<标识符 : 1>	216
,	<, : 41>	216
str	<标识符 : 1>	216
)	<) : 37>	216
==	<== : 67>	216
0	<整数 : 70>	216
)	<) : 37>	216
{	<{ : 34>	216
m	<标识符 : 1>	216
=	<= : 66>	216
1	<整数 : 70>	216
;	<; : 40>	216
}	<} : 35>	216
break	<break : 31>	216
;	<; : 40>	216
}	<} : 35>	216
case	<case : 32>	217
2	<整数 : 70>	217
:	<: : 42>	217
{	<{ : 34>	217
if	<if : 18>	217
(	<( : 36>	217
strcmp	<标识符 : 1>	217
(	<( : 36>	217
p2	<标识符 : 1>	217
->	<-> : 75>	217
book_p	<标识符 : 1>	217
->	<-> : 75>	217
batch	<标识符 : 1>	217
,	<, : 41>	217
str	<标识符 : 1>	217
)	<) : 37>	217
==	<== : 67>	217
0	<整数 : 70>	217
)	<) : 37>	217
{	<{ : 34>	217
m	<标识符 : 1>	217
=	<= : 66>	217
1	<整数 : 70>	217
;	<; : 40>	217
}	<} : 35>	217
break	<break : 31>	217
;	<; : 40>	217
}	<} : 35>	217
case	<case : 32>	218
3	<整数 : 70>	218
:	<: : 42>	218
{	<{ : 34>	218
if	<if : 18>	218
(	<( : 36>	218
strcmp	<标识符 : 1>	218
(	<( : 36>	218
p2	<标识符 : 1>	218
->	<-> : 75>	218
book_p	<标识符 : 1>	218
->	<-> : 75>	218
seek_num	<标识符 : 1>	218
,	<, : 41>	218
str	<标识符 : 1>	218
)	<) : 37>	218
==	<== : 67>	218
0	<整数 : 70>	218
)	<) : 37>	218
{	<{ : 34>	218
m	<标识符 : 1>	218
=	<= : 66>	218
1	<整数 : 70>	218
;	<; : 40>	218
}	<} : 35>	218
break	<break : 31>	218
;	<; : 40>	218
}	<} : 35>	218
case	<case : 32>	219
4	<整数 : 70>	219
:	<: : 42>	219
{	<{ : 34>	219
int	<int : 3>	219
i	<标识符 : 1>	219
=	<= : 66>	219
atoi	<标识符 : 1>	219
(	<( : 36>	219
str	<标识符 : 1>	219
)	<) : 37>	219
;	<; : 40>	219
if	<if : 18>	219
(	<( : 36>	219
i	<标识符 : 1>	219
==	<== : 67>	219
p2	<标识符 : 1>	219
->	<-> : 75>	219
book_p	<标识符 : 1>	219
->	<-> : 75>	219
frequency	<标识符 : 1>	219
)	<) : 37>	219
{	<{ : 34>	219
m	<标识符 : 1>	219
==	<== : 67>	219
1	<整数 : 70>	219
;	<; : 40>	219
}	<} : 35>	219
break	<break : 31>	219
;	<; : 40>	219
}	<} : 35>	219
case	<case : 32>	220
5	<整数 : 70>	220
:	<: : 42>	220
{	<{ : 34>	220
if	<if : 18>	220
(	<( : 36>	220
strcmp	<标识符 : 1>	220
(	<( : 36>	220
p2	<标识符 : 1>	220
->	<-> : 75>	220
book_p	<标识符 : 1>	220
->	<-> : 75>	220
name	<标识符 : 1>	220
,	<, : 41>	220
str	<标识符 : 1>	220
)	<) : 37>	220
==	<== : 67>	220
0	<整数 : 70>	220
)	<) : 37>	220
{	<{ : 34>	220
m	<标识符 : 1>	220
=	<= : 66>	220
1	<整数 : 70>	220
;	<; : 40>	220
}	<} : 35>	220
break	<break : 31>	220
;	<; : 40>	220
}	<} : 35>	220
case	<case : 32>	221
6	<整数 : 70>	221
:	<: : 42>	221
{	<{ : 34>	221
if	<if : 18>	221
(	<( : 36>	221
strcmp	<标识符 : 1>	221
(	<( : 36>	221
p2	<标识符 : 1>	221
->	<-> : 75>	221
book_p	<标识符 : 1>	221
->	<-> : 75>	221
author	<标识符 : 1>	221
,	<, : 41>	221
str	<标识符 : 1>	221
)	<) : 37>	221
==	<== : 67>	221
0	<整数 : 70>	221
)	<) : 37>	221
{	<{ : 34>	221
m	<标识符 : 1>	221
=	<= : 66>	221
1	<整数 : 70>	221
;	<; : 40>	221
}	<} : 35>	221
break	<break : 31>	221
;	<; : 40>	221
}	<} : 35>	221
case	<case : 32>	222
7	<整数 : 70>	222
:	<: : 42>	222
{	<{ : 34>	222
if	<if : 18>	222
(	<( : 36>	222
strcmp	<标识符 : 1>	222
(	<( : 36>	222
p2	<标识符 : 1>	222
->	<-> : 75>	222
book_p	<标识符 : 1>	222
->	<-> : 75>	222
publisher	<标识符 : 1>	222
,	<, : 41>	222
str	<标识符 : 1>	222
)	<) : 37>	222
==	<== : 67>	222
0	<整数 : 70>	222
)	<) : 37>	222
{	<{ : 34>	222
m	<标识符 : 1>	222
=	<= : 66>	222
1	<整数 : 70>	222
;	<; : 40>	222
}	<} : 35>	222
break	<break : 31>	222
;	<; : 40>	222
}	<} : 35>	222
case	<case : 32>	223
8	<整数 : 70>	223
:	<: : 42>	223
{	<{ : 34>	223
if	<if : 18>	223
(	<( : 36>	223
strcmp	<标识符 : 1>	223
(	<( : 36>	223
p2	<标识符 : 1>	223
->	<-> : 75>	223
book_p	<标识符 : 1>	223
->	<-> : 75>	223
isbn	<标识符 : 1>	223
,	<, : 41>	223
str	<标识符 : 1>	223
)	<) : 37>	223
==	<== : 67>	223
0	<整数 : 70>	223
)	<) : 37>	223
{	<{ : 34>	223
m	<标识符 : 1>	223
=	<= : 66>	223
1	<整数 : 70>	223
;	<; : 40>	223
}	<} : 35>	223
break	<break : 31>	223
;	<; : 40>	223
}	<} : 35>	223
case	<case : 32>	224
9	<整数 : 70>	224
:	<: : 42>	224
{	<{ : 34>	224
float	<float : 4>	224
i	<标识符 : 1>	224
=	<= : 66>	224
atof	<标识符 : 1>	224
(	<( : 36>	224
str	<标识符 : 1>	224
)	<) : 37>	224
;	<; : 40>	224
if	<if : 18>	224
(	<( : 36>	224
(	<( : 36>	224
i	<标识符 : 1>	224
-	<- : 50>	224
p2	<标识符 : 1>	224
->	<-> : 75>	224
book_p	<标识符 : 1>	224
->	<-> : 75>	224
price	<标识符 : 1>	224
)	<) : 37>	224
<	<< : 53>	224
1.0	<1.0  : 71>	 224
||	<|| : 63>	224
(	<( : 36>	224
i	<标识符 : 1>	224
-	<- : 50>	224
p2	<标识符 : 1>	224
->	<-> : 75>	224
book_p	<标识符 : 1>	224
->	<-> : 75>	224
price	<标识符 : 1>	224
)	<) : 37>	224
>	<> : 47>	224
-	<- : 50>	224
1.0	<1.0) : 71>	 224
)	<) : 37>	224
{	<{ : 34>	224
m	<标识符 : 1>	224
==	<== : 67>	224
1	<整数 : 70>	224
;	<; : 40>	224
}	<} : 35>	224
break	<break : 31>	224
;	<; : 40>	224
}	<} : 35>	224
case	<case : 32>	225
10	<整数 : 70>	225
:	<: : 42>	225
{	<{ : 34>	225
int	<int : 3>	225
i	<标识符 : 1>	225
=	<= : 66>	225
atoi	<标识符 : 1>	225
(	<( : 36>	225
str	<标识符 : 1>	225
)	<) : 37>	225
;	<; : 40>	225
if	<if : 18>	225
(	<( : 36>	225
i	<标识符 : 1>	225
==	<== : 67>	225
p2	<标识符 : 1>	225
->	<-> : 75>	225
book_p	<标识符 : 1>	225
->	<-> : 75>	225
status	<标识符 : 1>	225
)	<) : 37>	225
{	<{ : 34>	225
m	<标识符 : 1>	225
==	<== : 67>	225
1	<整数 : 70>	225
;	<; : 40>	225
}	<} : 35>	225
break	<break : 31>	225
;	<; : 40>	225
}	<} : 35>	225
case	<case : 32>	226
11	<整数 : 70>	226
:	<: : 42>	226
{	<{ : 34>	226
if	<if : 18>	226
(	<( : 36>	226
strcmp	<标识符 : 1>	226
(	<( : 36>	226
p2	<标识符 : 1>	226
->	<-> : 75>	226
book_p	<标识符 : 1>	226
->	<-> : 75>	226
lender	<标识符 : 1>	226
->	<-> : 75>	226
time	<标识符 : 1>	226
,	<, : 41>	226
str	<标识符 : 1>	226
)	<) : 37>	226
==	<== : 67>	226
0	<整数 : 70>	226
)	<) : 37>	226
{	<{ : 34>	226
m	<标识符 : 1>	226
=	<= : 66>	226
1	<整数 : 70>	226
;	<; : 40>	226
}	<} : 35>	226
break	<break : 31>	226
;	<; : 40>	226
}	<} : 35>	226
case	<case : 32>	227
12	<整数 : 70>	227
:	<: : 42>	227
{	<{ : 34>	227
if	<if : 18>	227
(	<( : 36>	227
strcmp	<标识符 : 1>	227
(	<( : 36>	227
p2	<标识符 : 1>	227
->	<-> : 75>	227
book_p	<标识符 : 1>	227
->	<-> : 75>	227
lender	<标识符 : 1>	227
->	<-> : 75>	227
id	<标识符 : 1>	227
,	<, : 41>	227
str	<标识符 : 1>	227
)	<) : 37>	227
==	<== : 67>	227
0	<整数 : 70>	227
)	<) : 37>	227
{	<{ : 34>	227
m	<标识符 : 1>	227
=	<= : 66>	227
1	<整数 : 70>	227
;	<; : 40>	227
}	<} : 35>	227
break	<break : 31>	227
;	<; : 40>	227
}	<} : 35>	227
}	<} : 35>	228
if	<if : 18>	229
(	<( : 36>	229
m	<标识符 : 1>	229
==	<== : 67>	229
1	<整数 : 70>	229
)	<) : 37>	229
{	<{ : 34>	229
NODE	<标识符 : 1>	230
*	<* : 56>	230
p3	<标识符 : 1>	230
=	<= : 66>	230
(	<( : 36>	230
NODE	<标识符 : 1>	230
*	<* : 56>	230
)	<) : 37>	230
malloc	<标识符 : 1>	230
(	<( : 36>	230
sizeof	<sizeof : 26>	230
(	<( : 36>	230
NODE	<标识符 : 1>	230
)	<) : 37>	230
)	<) : 37>	230
;	<; : 40>	230
p3	<标识符 : 1>	231
->	<-> : 75>	231
next	<标识符 : 1>	231
=	<= : 66>	231
head3	<标识符 : 1>	231
;	<; : 40>	231
head3	<标识符 : 1>	232
->	<-> : 75>	232
book_p	<标识符 : 1>	232
=	<= : 66>	232
p2	<标识符 : 1>	232
->	<-> : 75>	232
book_p	<标识符 : 1>	232
;	<; : 40>	232
head3	<标识符 : 1>	233
=	<= : 66>	233
p3	<标识符 : 1>	233
;	<; : 40>	233
}	<} : 35>	234
p2	<标识符 : 1>	235
=	<= : 66>	235
p2	<标识符 : 1>	235
->	<-> : 75>	235
next	<标识符 : 1>	235
;	<; : 40>	235
}	<} : 35>	236
while	<while : 12>	237
(	<( : 36>	237
head2	<标识符 : 1>	237
)	<) : 37>	237
{	<{ : 34>	237
//释放前一个链表的占用内存	<注释 : 76>	238
p2	<标识符 : 1>	238
=	<= : 66>	238
head2	<标识符 : 1>	238
;	<; : 40>	238
head2	<标识符 : 1>	239
=	<= : 66>	239
head2	<标识符 : 1>	239
->	<-> : 75>	239
next	<标识符 : 1>	239
;	<; : 40>	239
free	<标识符 : 1>	240
(	<( : 36>	240
p2	<标识符 : 1>	240
)	<) : 37>	240
;	<; : 40>	240
}	<} : 35>	241
return	<return : 20>	242
head3	<标识符 : 1>	242
;	<; : 40>	242
}	<} : 35>	243
